/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.abc.customer_one_system;

import com.abc.JDBCConnection.ConnectionClass;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author test
 */
public class AddCustomers extends javax.swing.JFrame {

    /**
     * Creates new form AddCustomers
     */
    public AddCustomers() {
        initComponents();
    }
    boolean flagDeDuplicate = false;
    List<Long> accountNumbers;

    AddCustomers(List<Long> accountNumbers) throws ClassNotFoundException, SQLException {
        initComponents();
        this.accountNumbers = accountNumbers;
        flagDeDuplicate = true;
        long baseAccountNo = accountNumbers.get(0);
        Connection connect = ConnectionClass.getConnected();
        Statement statement = connect.createStatement();
        String query = "select * from UnmappedData "
                + "where accountnumber=" + baseAccountNo;
        ResultSet resultData = statement.executeQuery(query);
        if (resultData.next()) {
            txtName.setText(resultData.getString("accountholder"));
            txtDOB.setText(resultData.getString("dateofbirth").substring(0, 10));
            txtPAN.setText(resultData.getString("pan"));
            txtAddress.setText(resultData.getString("address"));
            txtContactNo.setText(resultData.getString("phonenumber"));
            txtCity.setText(resultData.getString("city"));
            txtPIN.setText(resultData.getString("pin"));

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        lblDOB = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblPIN = new javax.swing.JLabel();
        lblEmailID = new javax.swing.JLabel();
        lblPAN = new javax.swing.JLabel();
        lblContactNo = new javax.swing.JLabel();
        lblOccupation = new javax.swing.JLabel();
        lblMonIncome = new javax.swing.JLabel();
        lblUserID = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        lblPasswordRe = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtDOB = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtPIN = new javax.swing.JTextField();
        txtEmailID = new javax.swing.JTextField();
        txtPAN = new javax.swing.JTextField();
        txtContactNo = new javax.swing.JTextField();
        txtOccupation = new javax.swing.JTextField();
        txtMonIncome = new javax.swing.JTextField();
        txtUserID = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblAddCustomers = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtPasswordRe = new javax.swing.JPasswordField();
        txtMsg = new javax.swing.JLabel();
        lblDateFormat = new javax.swing.JLabel();
        lblPinFormat = new javax.swing.JLabel();
        lblEmailFormat = new javax.swing.JLabel();
        lblPANFormat = new javax.swing.JLabel();
        lblMobileNoFormat = new javax.swing.JLabel();
        lblIncomeFormat = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblMsg = new javax.swing.JLabel();
        lblManditory1 = new javax.swing.JLabel();
        lblManditory2 = new javax.swing.JLabel();
        lblManditory9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAddress = new javax.swing.JTextArea();
        lblManditory4 = new javax.swing.JLabel();
        lblManditory5 = new javax.swing.JLabel();
        lblAddressMsg = new javax.swing.JLabel();
        lblCityMsg = new javax.swing.JLabel();
        lblManditory6 = new javax.swing.JLabel();
        lblManditory7 = new javax.swing.JLabel();
        lblManditory8 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblNameMsg = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Customers");

        lblName.setText("Name");

        lblDOB.setText("Date of Birth");

        lblAddress.setText("Address");

        lblCity.setText("City");

        lblPIN.setText("PIN Code");

        lblEmailID.setText("Email ID");

        lblPAN.setText("PAN");

        lblContactNo.setText("Conatact Number");

        lblOccupation.setText("Occupation");

        lblMonIncome.setText("Monthly Income");

        lblUserID.setText("User ID");

        lblPassword.setText("Password");

        lblPasswordRe.setText("Re-enter Password");

        txtName.setText("a");
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        txtDOB.setText("29/10/1996");
        txtDOB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDOBActionPerformed(evt);
            }
        });

        txtCity.setText("a");

        txtPIN.setText("123321");

        txtContactNo.setText("1233211233");
        txtContactNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactNoActionPerformed(evt);
            }
        });

        txtMonIncome.setText("12.0");
        txtMonIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMonIncomeActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAddCustomers.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        lblAddCustomers.setText("ADD CUSTOMERS");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        lblDateFormat.setText("dd/mm/yyyy");

        lblPinFormat.setText(" ");

        lblEmailFormat.setText(" ");

        lblPANFormat.setText(" ");

        lblMobileNoFormat.setText(" ");

        lblIncomeFormat.setText(" ");

        jLabel6.setText(" ");

        jLabel7.setText(" ");

        jLabel8.setText(" ");

        lblMsg.setText(" ");

        lblManditory1.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory1.setText("*");

        lblManditory2.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory2.setText("*");

        lblManditory9.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory9.setText("*");

        txtAddress.setColumns(20);
        txtAddress.setRows(5);
        txtAddress.setText("a");
        jScrollPane1.setViewportView(txtAddress);

        lblManditory4.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory4.setText("*");

        lblManditory5.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory5.setText("*");

        lblAddressMsg.setText(" ");

        lblCityMsg.setText(" ");

        lblManditory6.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory6.setText("*");

        lblManditory7.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory7.setText("*");

        lblManditory8.setForeground(new java.awt.Color(250, 9, 9));
        lblManditory8.setText("*");

        jLabel13.setForeground(new java.awt.Color(250, 9, 9));
        jLabel13.setText("*");

        jLabel14.setForeground(new java.awt.Color(250, 9, 9));
        jLabel14.setText("*");

        lblNameMsg.setText(" ");

        btnClear.setText("Clear");
        btnClear.setToolTipText("Clear Data Fields");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(txtMsg)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblManditory2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblManditory1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblManditory9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblManditory4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblManditory5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblManditory6, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManditory7, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManditory8, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblContactNo)
                                .addComponent(lblName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblDOB, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblAddress, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(lblMonIncome)
                            .addComponent(lblUserID)
                            .addComponent(lblPassword)
                            .addComponent(lblPasswordRe)
                            .addComponent(lblCity)
                            .addComponent(lblPIN)
                            .addComponent(lblEmailID)
                            .addComponent(lblPAN)
                            .addComponent(lblOccupation))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUserID, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtDOB)
                            .addComponent(txtName)
                            .addComponent(txtPIN)
                            .addComponent(txtEmailID)
                            .addComponent(txtPAN)
                            .addComponent(txtContactNo)
                            .addComponent(txtOccupation)
                            .addComponent(txtMonIncome)
                            .addComponent(txtPassword)
                            .addComponent(txtPasswordRe, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCity, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblAddCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDateFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEmailFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPANFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMobileNoFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblIncomeFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAddressMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCityMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPinFormat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNameMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(139, 139, 139))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManditory1)
                    .addComponent(lblNameMsg))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDOB)
                    .addComponent(txtDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateFormat)
                    .addComponent(lblManditory2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblAddress)
                                .addComponent(lblManditory9))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(lblAddressMsg)))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblManditory4)
                    .addComponent(lblCityMsg))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPIN)
                    .addComponent(txtPIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPinFormat)
                    .addComponent(lblManditory5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmailID)
                    .addComponent(txtEmailID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmailFormat))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPAN)
                    .addComponent(txtPAN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPANFormat))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblContactNo)
                    .addComponent(txtContactNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMobileNoFormat)
                    .addComponent(lblManditory6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOccupation)
                    .addComponent(txtOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMonIncome)
                    .addComponent(txtMonIncome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIncomeFormat)
                    .addComponent(lblManditory7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserID)
                    .addComponent(txtUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(lblManditory8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPassword)
                        .addComponent(jLabel13))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPasswordRe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblPasswordRe)
                        .addComponent(jLabel14)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnSubmit)
                    .addComponent(lblMsg)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMsg)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtDOBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDOBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDOBActionPerformed

    private void txtContactNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtContactNoActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        MatchFormats match = new MatchFormats();
        boolean flag = true;
        boolean optionalDataFlag[] = {true, true, true};
        try {
            Connection connect = ConnectionClass.getConnected();
            lblMsg.setText("");
            String name = txtName.getText().trim();
            if (name.equals("")) {
                lblNameMsg.setText("Cannot be empty");
                flag &= false;
            } else {
                lblNameMsg.setText("");
                flag &= true;
            }
            String dob = txtDOB.getText().trim();
            if (dob.equals("")) {
                lblDateFormat.setText("Cannot be empty");
                flag &= false;
            } else if (!match.matchDOB(dob)) {
                lblDateFormat.setText("Invalid date");
                flag &= false;
            } else {
                lblDateFormat.setText("dd/mm/yyyy");
                flag &= true;
            }
            String address = txtAddress.getText().trim();
            if (address.equals("")) {
                lblAddressMsg.setText("Cannot be empty");
                flag &= false;
            } else {
                lblAddressMsg.setText("");
                flag &= true;
            }
            String city = txtCity.getText().trim();
            if (city.equals("")) {
                lblCityMsg.setText("Cannot be empty");
                flag &= false;
            } else {
                lblCityMsg.setText("");
            }
            String pin = txtPIN.getText().trim().toUpperCase();
            if (pin.equals("")) {
                lblPinFormat.setText("Cannot be empty");
                flag &= false;
            } else if (!match.matchPIN(pin)) {
                lblPinFormat.setText("Invalid Format");
                flag &= false;
            } else {
                lblPinFormat.setText("");
            }
            String email = txtEmailID.getText().trim();
            if (email.equals("")) {
                optionalDataFlag[0] = false;
                lblEmailFormat.setText("");
            } else if (!match.matchEmail(email)) {
                lblEmailFormat.setText("Invalid Email");
                flag &= false;
            } else {
                lblEmailFormat.setText("");
            }
            String pan = txtPAN.getText().trim();
            if (pan.equals("")) {
                optionalDataFlag[1] = false;
                lblPANFormat.setText("");
            } else if (!match.matchPAN(pan)) {
                lblPANFormat.setText("Invalid Format");
                flag &= false;
            } else {
                lblPANFormat.setText("");
            }
            String contactNo = txtContactNo.getText().trim();
            if (contactNo.equals("")) {
                lblMobileNoFormat.setText("Cannot be empty");
                flag &= false;
            } else if (!match.matchMobileNo(contactNo)) {
                lblMobileNoFormat.setText("Invalid Format");
                flag &= false;
            } else {
                lblMobileNoFormat.setText("");
            }
            String occupation = txtOccupation.getText().trim();
            if (occupation.equals("")) {
                optionalDataFlag[2] = false;
                lblMsg.setText("");
            }
            Double monthlyIncome = null;
            if (txtMonIncome.getText().trim().equals("")) {
                lblIncomeFormat.setText("Cannot be empty");
                flag &= false;
            } else {
                monthlyIncome = Double.parseDouble(txtMonIncome.getText().trim());
                lblMsg.setText("");
            }
            if (flag) {
                lblMsg.setText("Loading..");
                if (!isPresent(name, contactNo, connect)) {
                    lblMsg.setText("Adding Data..");
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    LocalDateTime now = LocalDateTime.now();
                    String openingDate = dtf.format(now);
                    String password = createPassword();
                    String usrName = createUsrName();
                    txtUserID.setText(usrName);
                    txtPassword.setText(password);
                    txtPasswordRe.setText(password);
                    String query1 = "insert into customer ("
                            + "customer_id,preferred_acc_1,"
                            + "name,address,pin,"
                            + "city,salary,mobile_num,"
                            + "cust_user_name,custpassword,"
                            + "date_of_birth,opening_date)"
                            + " values (CUST_ID_SEQ.nextval,ACCOUNT_NUM_SEQ.nextval,"
                            + "?,?,?,?,?,?,?,?,"
                            + "to_date(?, 'dd/mm/yyyy'),"
                            + "to_date(?, 'dd/mm/yyyy'))";
                    PreparedStatement prepStmt = connect.prepareStatement(query1);
                    prepStmt.setString(1, name.toLowerCase());
                    prepStmt.setString(2, address.toLowerCase());
                    prepStmt.setString(3, pin.toLowerCase());
                    prepStmt.setString(4, city.toLowerCase());
                    prepStmt.setDouble(5, monthlyIncome);
                    prepStmt.setString(6, contactNo);
                    prepStmt.setString(7, usrName);
                    prepStmt.setString(8, password);
                    prepStmt.setString(9, dob);
                    prepStmt.setString(10, openingDate);
                    int res = prepStmt.executeUpdate();
                    if (optionalDataFlag[0]) {
                        String query2 = "update customer set email_id =? where cust_user_name=? ";
                        prepStmt = connect.prepareStatement(query2);
                        prepStmt.setString(1, email);
                        prepStmt.setString(2, usrName);
                        int res1 = prepStmt.executeUpdate();
                    }
                    if (optionalDataFlag[1]) {
                        String query3 = "update customer set pan =? where cust_user_name=? ";
                        prepStmt = connect.prepareStatement(query3);
                        prepStmt.setString(1, pan);
                        prepStmt.setString(2, usrName);
                        int res2 = prepStmt.executeUpdate();
                    }
                    if (optionalDataFlag[2]) {
                        String query4 = "update customer set occupation =? where cust_user_name=? ";
                        prepStmt = connect.prepareStatement(query4);
                        prepStmt.setString(1, occupation);
                        prepStmt.setString(2, usrName);
                        int res3 = prepStmt.executeUpdate();
                    }
                    prepStmt.close();
                    lblMsg.setText("Data Added");
                    if (flagDeDuplicate) {
                        Statement statement = connect.createStatement();
                        String query = "select cust_id_seq.currval from dual";
                        ResultSet resultData = statement.executeQuery(query);
                        resultData.next();
                        int custID=resultData.getInt(1);
                        addInAccount(custID);
                        new DeDuplication().setVisible(true);
                        this.setVisible(false);

                    } else {
                        Statement statement = connect.createStatement();
                        String query = "select cust_id_seq.currval from dual";
                        ResultSet resultData = statement.executeQuery(query);
                        resultData.next();
                        int custID = resultData.getInt(1);

                        AccountSetup obj = new AccountSetup(custID);
                        obj.setVisible(true);
                        this.setVisible(false);
                    }

                } else {
                    lblMsg.setText("Data Already Exists");
                }

            }
        } catch (NumberFormatException e) {
            lblMsg.setText("Invalid input(s)");
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private boolean isPresent(String name, String contactNo, Connection connect) throws SQLException {

        String statement = "select (customer_id) from customer where name=? and mobile_num=?";
        PreparedStatement stmt = connect.prepareStatement(statement);
        stmt.setString(1, name);
        stmt.setString(2, contactNo);
        ResultSet rs = stmt.executeQuery();
        return rs.next();
    }


    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        try {
            MainMenu obj = new MainMenu();
            obj.setVisible(true);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddCustomers.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnBackActionPerformed

    private void txtMonIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMonIncomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMonIncomeActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtName.setText("");
        txtAddress.setText("");
        txtContactNo.setText("");
        txtPIN.setText("");
        txtPAN.setText("");
        txtOccupation.setText("");
        txtMonIncome.setText("");
        txtUserID.setText("");
        txtPassword.setText("");
        txtPasswordRe.setText("");
        txtMsg.setText("");
        txtEmailID.setText("");
        txtDOB.setText("");
        txtCity.setText("");
        lblMsg.setText("");
        lblAddressMsg.setText("");
        lblCityMsg.setText("");
        lblDateFormat.setText("");
        lblEmailFormat.setText("");
        lblIncomeFormat.setText("");
        lblNameMsg.setText("");
        lblPANFormat.setText("");
        lblPinFormat.setText("");
        lblMobileNoFormat.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddCustomers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddCustomers;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAddressMsg;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCityMsg;
    private javax.swing.JLabel lblContactNo;
    private javax.swing.JLabel lblDOB;
    private javax.swing.JLabel lblDateFormat;
    private javax.swing.JLabel lblEmailFormat;
    private javax.swing.JLabel lblEmailID;
    private javax.swing.JLabel lblIncomeFormat;
    private javax.swing.JLabel lblManditory1;
    private javax.swing.JLabel lblManditory2;
    private javax.swing.JLabel lblManditory4;
    private javax.swing.JLabel lblManditory5;
    private javax.swing.JLabel lblManditory6;
    private javax.swing.JLabel lblManditory7;
    private javax.swing.JLabel lblManditory8;
    private javax.swing.JLabel lblManditory9;
    private javax.swing.JLabel lblMobileNoFormat;
    private javax.swing.JLabel lblMonIncome;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNameMsg;
    private javax.swing.JLabel lblOccupation;
    private javax.swing.JLabel lblPAN;
    private javax.swing.JLabel lblPANFormat;
    private javax.swing.JLabel lblPIN;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPasswordRe;
    private javax.swing.JLabel lblPinFormat;
    private javax.swing.JLabel lblUserID;
    private javax.swing.JTextArea txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtContactNo;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtEmailID;
    private javax.swing.JTextField txtMonIncome;
    private javax.swing.JLabel txtMsg;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtOccupation;
    private javax.swing.JTextField txtPAN;
    private javax.swing.JTextField txtPIN;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordRe;
    private javax.swing.JTextField txtUserID;
    // End of variables declaration//GEN-END:variables

    private String createPassword() {
        //To change body of generated methods, choose Tools | Templates.
        Random rand = new Random();
        return Integer.toString(rand.nextInt(10)) + Integer.toString(rand.nextInt(10)) + Integer.toString(rand.nextInt(10));
    }

    private String createUsrName() {
        Random rand = new Random();
        return "cust" + Integer.toString(rand.nextInt(10)) + Integer.toString(rand.nextInt(10)) + Integer.toString(rand.nextInt(10));
    }

    private void addInAccount(int custID) throws ClassNotFoundException, SQLException {

        Connection connect = ConnectionClass.getConnected();
        Statement statement = connect.createStatement();
        String q = "insert into account values (?,?,?,?,"
                + "to_date(?,'yyyy-mm-dd'),?)";
        PreparedStatement prepStmt = connect.prepareStatement(q);
        for (int i = 0; i < accountNumbers.size(); i++) {
            //System.out.println("cvfgbhj");
            prepStmt.setLong(1, accountNumbers.get(i));
            prepStmt.setString(2, "savings");
            prepStmt.setString(3, "active");
            prepStmt.setDouble(4, 500);
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate localDate = LocalDate.now();
            prepStmt.setString(5, (String) dtf.format(localDate));
            prepStmt.setInt(6, custID);
            prepStmt.addBatch();
        }
        prepStmt.executeBatch();
        for (int i = 0; i < accountNumbers.size(); i++) {
            String q1 = "delete from unmappeddata where accountnumber = " + accountNumbers.get(i);
            statement.executeUpdate(q1);
        }
        lblMsg.setText("Data DeDuplicated");
    }
}
